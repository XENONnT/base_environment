#!/bin/bash

#######################################################################
#
# versions in this release

gfal2_bindings_version=v1.11.1 # project is not releasing often enough
gfal2_util_version=1.7.1
rucio_version=1.29.3

#######################################################################

set -e

target_dir=$1

xenonnt_tag=$2

if [ "x$xenonnt_tag" = "x" ]; then
    xenonnt_tag=development
fi

env_name=xenonnt_base

if [ "X$target_dir" = "X" ]; then
    echo "Please specify a target directory. Example: ./create-env /tmp/myenv" >&1
    exit 1
fi

if [ -e $target_dir ]; then
    echo "Target directory already exists - refusing to work on it" >&1
    exit 1
fi
mkdir -p $target_dir


function announce {
    echo
    echo "#######################################################################################"
    echo "## $1       ("`date -u`")"
    echo
}


function run_quietly {
    log=`mktemp --suffix=.log`
    rc=0
    echo "Running quietly: $@"
    if ! $@ >$log 2>&1; then
        rc=$?
        tail -n 500 $log
    fi
    rm -f $log
    return $rc
}


# build environment
export LC_ALL=en_US.utf8
export LANG=en_US.utf8

announce "Installing Miniconda"
wget -nv -O conda_setup.sh https://repo.anaconda.com/miniconda/Miniconda3-py38_4.12.0-Linux-x86_64.sh

bash conda_setup.sh -b -p $target_dir/anaconda
rm -f conda_setup.sh

export PKG_CONFIG_PATH=${target_dir}/anaconda/envs/${env_name}/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig

announce "Installing Anaconda environment"
yes | $target_dir/anaconda/bin/conda env create -f conda_xnt.yml

announce "Activating Anaconda environment"
source $target_dir/anaconda/bin/activate ${env_name}

# Update conda
announce "Updating conda"
conda update -n base -c defaults conda

# Forging nodejs (for jupyter)
# announce "Installing nodejs"
# conda install -c conda-forge/label/main nodejs --yes
# Enable widgets for online monitor
jupyter labextension install @jupyter-widgets/jupyterlab-manager


announce "Cleaning Anaconda environment"
$target_dir/anaconda/bin/conda clean --all --yes
rm -f ${target_dir}/anaconda/pkgs/rope-0.11.0-py37_0/info/LICENSE.txt


# rucio config
cat >${target_dir}/anaconda/envs/${env_name}/etc/rucio.cfg <<EOF
[common]
logdir = /var/log/rucio
loglevel = DEBUG
mailtemplatedir=/opt/rucio/etc/mail_templates

[client]
rucio_host = https://rucio-xenon.grid.uchicago.edu:443
auth_host = https://rucio-xenon.grid.uchicago.edu:443
auth_type = x509_proxy

# ca_cert = /etc/grid-security/certificates
ca_cert = \$X509_CERT_DIR
client_cert = \$X509_USER_PROXY
client_key = \$X509_USER_PROXY
client_x509_proxy = \$X509_USER_PROXY
request_retries = 3
EOF

announce "Adding setup.sh"

# generate setup.sh file for easy sourcing
cat >${target_dir}/setup.sh <<EOF
#!/bin/bash

for VAR in X509_CERT_DIR X509_VOMS_DIR; do
    VALUE=\${!VAR}
    if [ "X\$VALUE" != "X" ]; then
        echo "WARNING: \$VAR is set set and could lead to problems when using this environment" 1>&2
    fi
done

# Need a clean environment - this is to prevent inheriting host specifics from the outside
# Note that "unset" is not great here, as Singularity might just take that as
# keeping the value from the host instead of clearing it.
export OSG_LOCATION=""
export GLOBUS_LOCATION=""
export PYTHONPATH=""
export PERL5LIB=""

# when inside a container, reset some variables from outside

if [ "x\$SINGULARITY_CONTAINER" != "x" ]; then
    export PATH=/usr/bin:/usr/local/bin
    export LD_LIBRARY_PATH=""
# if not in a singularity container, use cvmfs CA certificates
else
    # first check if the directory is mounted
    if [ -e "/cvmfs/oasis.opensciencegrid.org/mis/osg-wn-client/certificates" ]; then
        export X509_CERT_DIR=/cvmfs/oasis.opensciencegrid.org/mis/osg-wn-client/certificates
    fi
fi

# devtools-9 environment for updated compilers
if [ -e /opt/rh/devtoolset-9/enable ]; then
    source /opt/rh/devtoolset-9/enable
fi

source ${target_dir}/anaconda/bin/activate ${env_name}

# prepend to LD_LIBRARY_PATH - non-Python tools might be using it
export LD_LIBRARY_PATH=\$CONDA_PREFIX/lib64:\$CONDA_PREFIX/lib\${LD_LIBRARY_PATH:+:}\${LD_LIBRARY_PATH}

# set GFAL_CONFIG_DIR and GFAL_PLUGIN_DIR explicitly so that we do not pick up a bad values from the site
export GFAL_CONFIG_DIR="/etc/gfal2.d"
export GFAL_PLUGIN_DIR="/usr/lib64/gfal2-plugins"

# rucio
export RUCIO_HOME=\$CONDA_PREFIX
export RUCIO_ACCOUNT=xenon-analysis
if [ "x\$X509_CERT_DIR" = "x" ]; then
    export X509_CERT_DIR=/etc/grid-security/certificates
fi


# site-specific stuff
for space in /project2/lgrandi/grid_proxy /xenon/grid_proxy; do
    if [ -d \$space ]; then
        if [ "x\$X509_USER_PROXY" = "x" ]; then
            export X509_USER_PROXY=\${space}/xenon_service_proxy
        fi
        # change where we cache the .pyc files if we are on one of these sites.
        export PYTHONPYCACHEPREFIX=/tmp/\$USER
    fi
done

# xenon config location on midway
config_path=/project2/lgrandi/xenonnt/xenon.config
if [ -e \$config_path ]; then
   export XENON_CONFIG=\$config_path
fi

# set env variable for matplotlib styles on Midway
MPL_DIR='/dali/lgrandi/xenonnt/software/nton/mplconfigs/'
if [ -e \$MPL_DIR ]; then
   export MPLCONFIGDIR=\$MPL_DIR
fi

EOF

announce "Adding zzz-50-xenon.sh"

# this will be sourced when entering the container, but
# should be sourced last in order to pick up for example
# SINGULARITYENV_... vars
mkdir -p /.singularity.d/env
cat > /.singularity.d/env/zzz-50-xenon.sh <<EOF
#!/bin/sh

if [ "x\$XENON_DEBUG" != "x" ]; then
    echo 1>&2
    echo "Environment before sourcing XENONnT setup:" 1>&2
    (env | sort) 1>&2
    echo 1>&2
fi

if [ "x\$XENON_SOURCE" = "x" ]; then
    export XENON_SOURCE=1
fi

if [ \$XENON_SOURCE -eq 1 ]; then
    source ${target_dir}/setup.sh
fi

if [ "x\$XENON_DEBUG" != "x" ]; then
    echo 1>&2
    echo "Environment after sourcing XENONnT setup:" 1>&2
    (env | sort) 1>&2
    echo 1>&2
fi
EOF

# Done testing
announce "All done!"
